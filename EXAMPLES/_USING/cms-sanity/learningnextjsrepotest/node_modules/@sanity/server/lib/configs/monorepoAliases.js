"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMonorepoAliases = getMonorepoAliases;

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var MONOREPO_PATH = _path.default.resolve(__dirname, '../../../../..');

function resolve() {
  for (var _len = arguments.length, segments = new Array(_len), _key = 0; _key < _len; _key++) {
    segments[_key] = arguments[_key];
  }

  return _path.default.resolve(MONOREPO_PATH, ...segments);
}

function getMonorepoAliases() {
  var defaultAliases = {
    '@sanity/ui': require.resolve('@sanity/ui'),
    'styled-components': require.resolve('styled-components')
  };

  try {
    var tsconfig = require('tsconfig'); // eslint-disable-next-line no-sync


    var result = tsconfig.loadSync(MONOREPO_PATH);
    var compilerOptions = result.config.compilerOptions;

    if (!compilerOptions.baseUrl || !compilerOptions.paths) {
      return defaultAliases;
    }

    var pathEntries = Object.entries(compilerOptions.paths);
    var aliases = pathEntries.map(_ref => {
      var _ref2 = _slicedToArray(_ref, 2),
          key = _ref2[0],
          value = _ref2[1];

      return [key, value[0]];
    });
    return aliases.reduce((acc, _ref3) => {
      var _ref4 = _slicedToArray(_ref3, 2),
          key = _ref4[0],
          relativePath = _ref4[1];

      acc[key] = resolve(compilerOptions.baseUrl, relativePath);
      return acc;
    }, defaultAliases);
  } catch (err) {
    // eslint-disable-next-line no-console
    console.warn('WARNING: failed to load paths from tsconfig.json in monorepo', err.message);
  }

  return defaultAliases;
}