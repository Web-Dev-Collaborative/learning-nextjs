"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefaultSource = void 0;

var _uniqueId2 = _interopRequireDefault(require("lodash/uniqueId"));

var _react = _interopRequireDefault(require("react"));

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _versionedClient = require("../versionedClient");

var _Asset = _interopRequireDefault(require("./Asset"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var PER_PAGE = 200;

var buildQuery = function buildQuery() {
  var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PER_PAGE;
  return "\n  *[_type == \"sanity.imageAsset\"] | order(_updatedAt desc) [".concat(start, "...").concat(end, "] {\n    _id,\n    url,\n    originalFilename,\n    metadata {dimensions}\n  }\n");
};

class DefaultSource extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      assets: [],
      isLastPage: false,
      isLoading: false
    });

    _defineProperty(this, "_elementId", "default-asset-source-".concat((0, _uniqueId2.default)()));

    _defineProperty(this, "pageNo", 0);

    _defineProperty(this, "fetch$", void 0);

    _defineProperty(this, "handleDeleteFinished", id => {
      this.setState(prevState => ({
        assets: prevState.assets.filter(asset => asset._id !== id)
      }));
    });

    _defineProperty(this, "handleItemClick", event => {
      event.preventDefault();
      this.select(event.currentTarget.getAttribute('data-id'));
    });

    _defineProperty(this, "handleItemKeyPress", event => {
      if (event.key === 'Enter') {
        event.preventDefault();
        this.select(event.currentTarget.getAttribute('data-id'));
      }
    });

    _defineProperty(this, "handleClose", () => {
      if (this.props.onClose) {
        this.props.onClose();
      }
    });

    _defineProperty(this, "handleFetchNextPage", () => {
      this.fetchPage(++this.pageNo);
    });
  }

  fetchPage(pageNo) {
    var start = pageNo * PER_PAGE;
    var end = start + PER_PAGE;
    this.setState({
      isLoading: true
    });
    this.fetch$ = _versionedClient.versionedClient.observable.fetch(buildQuery(start, end), {}, {
      tag: 'asset.image-list'
    }).subscribe(result => {
      this.setState(prevState => ({
        isLastPage: result.length < PER_PAGE,
        assets: prevState.assets.concat(result),
        isLoading: false
      }));
    });
  }

  componentDidMount() {
    this.fetchPage(this.pageNo);
  }

  componentWillUnmount() {
    if (this.fetch$) {
      this.fetch$.unsubscribe();
    }
  }

  select(id) {
    var selected = this.state.assets.find(doc => doc._id === id);

    if (selected) {
      this.props.onSelect([{
        kind: 'assetDocumentId',
        value: id
      }]);
    }
  }

  render() {
    var selectedAssets = this.props.selectedAssets;
    var _this$state = this.state,
        assets = _this$state.assets,
        isLastPage = _this$state.isLastPage,
        isLoading = _this$state.isLoading;
    return /*#__PURE__*/_react.default.createElement(_ui.Dialog, {
      id: this._elementId,
      header: "Select image",
      width: 2,
      onClose: this.handleClose
    }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
      padding: 4
    }, /*#__PURE__*/_react.default.createElement(_ui.Grid, {
      gap: 2,
      style: {
        gridTemplateColumns: 'repeat(auto-fill, minmax(120px, 1fr))'
      }
    }, assets.map(asset => /*#__PURE__*/_react.default.createElement(_Asset.default, {
      key: asset._id,
      asset: asset,
      isSelected: selectedAssets.some(selected => selected._id === asset._id),
      onClick: this.handleItemClick,
      onKeyPress: this.handleItemKeyPress,
      onDeleteFinished: this.handleDeleteFinished
    }))), isLoading && assets.length === 0 && /*#__PURE__*/_react.default.createElement(_ui.Flex, {
      justify: "center"
    }, /*#__PURE__*/_react.default.createElement(_ui.Spinner, {
      muted: true
    })), !isLoading && assets.length === 0 && /*#__PURE__*/_react.default.createElement(_ui.Text, {
      align: "center",
      muted: true
    }, "No images")), assets.length > 0 && !isLastPage && /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      padding: 4,
      style: {
        borderTop: '1px solid var(--card-border-color)'
      }
    }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
      icon: _icons.DownloadIcon,
      loading: isLoading,
      onClick: this.handleFetchNextPage,
      text: "Load more",
      tone: "primary"
    })));
  }

}

exports.DefaultSource = DefaultSource;