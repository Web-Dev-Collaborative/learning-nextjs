"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withPortableText = void 0;
const plugins_1 = require("./plugins");
const operationToPatches_1 = require("../utils/operationToPatches");
const debug_1 = require("../utils/debug");
const debug = debug_1.debugWithName('createPortableTextEditor');
const disablePlugin = (name) => {
    debug(`Editor plugin '${name}' is disabled`);
    // This is the signature of a minimal Slate plugin
    return (editor) => {
        // Do some transformations here...
        return editor; // Return void to stop the plugin chain here
    };
};
exports.withPortableText = (editor, options) => {
    const e = editor;
    const { portableTextFeatures, keyGenerator, change$, maxBlocks, incomingPatche$, readOnly } = options;
    const operationToPatches = operationToPatches_1.createOperationToPatches(portableTextFeatures);
    const withObjectKeys = plugins_1.createWithObjectKeys(portableTextFeatures, keyGenerator);
    const withScemaTypes = plugins_1.createWithSchemaTypes(portableTextFeatures);
    const withPatches = readOnly
        ? disablePlugin('withPatches')
        : plugins_1.createWithPatches(operationToPatches, change$, portableTextFeatures, incomingPatche$);
    const withMaxBlocks = maxBlocks && maxBlocks > 0 ? plugins_1.createWithMaxBlocks(maxBlocks) : disablePlugin('withMaxBlocks');
    const withPortableTextLists = plugins_1.createWithPortableTextLists(portableTextFeatures, change$);
    const withUndoRedo = readOnly
        ? disablePlugin('withUndoRedo')
        : plugins_1.createWithUndoRedo(incomingPatche$);
    const withPortableTextMarkModel = plugins_1.createWithPortableTextMarkModel(portableTextFeatures, keyGenerator, change$);
    const withPortableTextBlockStyle = plugins_1.createWithPortableTextBlockStyle(portableTextFeatures, change$);
    const withUtils = plugins_1.createWithUtils(portableTextFeatures);
    return withPatches(withUndoRedo(withUtils(withPortableTextBlockStyle(withPortableTextLists(withPortableTextMarkModel(withObjectKeys(withScemaTypes(withMaxBlocks(e)))))))));
};
//# sourceMappingURL=withPortableText.js.map