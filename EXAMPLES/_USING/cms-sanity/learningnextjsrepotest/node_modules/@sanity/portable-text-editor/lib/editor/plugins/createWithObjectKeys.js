"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createWithObjectKeys = void 0;
const slate_1 = require("slate");
/**
 * This plugin makes sure that every new node in the editor get a new _key prop when created
 *
 */
function createWithObjectKeys(portableTextFeatures, keyGenerator) {
    return function withKeys(editor) {
        const { apply, normalizeNode } = editor;
        editor.apply = operation => {
            if (operation.type === 'split_node') {
                operation.properties = Object.assign(Object.assign({}, operation.properties), { _key: keyGenerator() });
            }
            if (operation.type === 'insert_node') {
                // Must be given a new key or adding/removing marks while typing gets in trouble (duped keys)!
                operation.node = Object.assign(Object.assign({}, operation.node), { _key: keyGenerator() });
            }
            apply(operation);
        };
        editor.normalizeNode = entry => {
            const [node, path] = entry;
            if (slate_1.Element.isElement(node) && node._type === portableTextFeatures.types.block.name) {
                // Set key on block itself
                if (!node._key) {
                    slate_1.Transforms.setNodes(editor, { _key: keyGenerator() }, { at: path });
                }
                // Set keys on it's children
                for (const [child, childPath] of slate_1.Node.children(editor, path)) {
                    if (!child._key) {
                        slate_1.Transforms.setNodes(editor, { _key: keyGenerator() }, { at: childPath });
                        return;
                    }
                }
            }
            // Do the original `normalizeNode` to enforce other constraints.
            normalizeNode(entry);
        };
        return editor;
    };
}
exports.createWithObjectKeys = createWithObjectKeys;
//# sourceMappingURL=createWithObjectKeys.js.map