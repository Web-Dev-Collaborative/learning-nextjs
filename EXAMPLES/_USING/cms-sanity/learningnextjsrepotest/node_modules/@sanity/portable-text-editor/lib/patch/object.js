"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const applyPatch_1 = __importDefault(require("./applyPatch"));
function apply(value, patch) {
    const nextValue = lodash_1.clone(value);
    if (patch.path.length === 0) {
        // its directed to me
        if (patch.type === 'set') {
            if (!lodash_1.isObject(patch.value)) {
                // eslint-disable-line max-depth
                throw new Error('Cannot set value of an object to a non-object');
            }
            return patch.value;
        }
        else if (patch.type === 'unset') {
            return undefined;
        }
        else if (patch.type === 'setIfMissing') {
            // console.log('IS IT missing?', value)
            return value === undefined ? patch.value : value;
        }
        throw new Error(`Invalid object operation: ${patch.type}`);
    }
    // The patch is not directed to me
    const [head, ...tail] = patch.path;
    if (typeof head !== 'string') {
        throw new Error(`Expected field name to be a string, instad got: ${head}`);
    }
    if (tail.length === 0 && patch.type === 'unset') {
        return lodash_1.omit(nextValue, head);
    }
    nextValue[head] = applyPatch_1.default(nextValue[head], Object.assign(Object.assign({}, patch), { path: tail }));
    return nextValue;
}
exports.default = apply;
//# sourceMappingURL=object.js.map