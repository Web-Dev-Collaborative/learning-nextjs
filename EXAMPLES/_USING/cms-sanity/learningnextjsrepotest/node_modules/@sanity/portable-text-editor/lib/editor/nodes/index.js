"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListItemInner = exports.ListItem = exports.InlineObject = exports.BlockObject = exports.DraggableBlockWrappper = void 0;
const styled_components_1 = __importDefault(require("styled-components"));
exports.DraggableBlockWrappper = styled_components_1.default.div.withConfig({ displayName: "DraggableBlockWrappper", componentId: "sc-1p9sj4p" }) `border-top:${props => {
    if (props.isDraggingOverTop) {
        return '1px solid black';
    }
    return '1px solid transparent';
}};border-bottom:${props => {
    if (props.isDraggingOverBottom) {
        return '1px solid black';
    }
    return '1px solid transparent';
}};`;
exports.BlockObject = styled_components_1.default.div.withConfig({ displayName: "BlockObject", componentId: "sc-1seeim0" }) `user-select:none;border:${props => {
    if (props.selected) {
        return '1px solid blue';
    }
    return '1px solid transparent';
}};`;
exports.InlineObject = styled_components_1.default.span.withConfig({ displayName: "InlineObject", componentId: "sc-ubocvw" }) `background:#999;border:${props => {
    if (props.selected) {
        return '1px solid blue';
    }
    return '1px solid transparent';
}};`;
exports.ListItem = styled_components_1.default.div.withConfig({ displayName: "ListItem", componentId: "sc-p474ze" }) `&.pt-list-item{width:fit-content;position:relative;display:block;transform:translateZ(0);margin-left:${props => getLeftPositionForListLevel(props.listLevel)};}&.pt-list-item > .pt-list-item-inner{display:flex;margin:0;padding:0;&:before{justify-content:flex-start;vertical-align:top;}}&.pt-list-item-bullet > .pt-list-item-inner:before{content:'${props => getContentForListLevelAndStyle(props.listLevel, props.listStyle)}';font-size:0.4375rem;line-height:1.5rem;position:relative;}}&.pt-list-item-bullet > .pt-list-item-inner{&:before{min-width:1.5rem;}}&.pt-list-item-number{counter-increment:${props => getCounterIncrementForListLevel(props.listLevel)};counter-rest:${props => getCounterResetForListLevel(props.listLevel)};}& +:not(.pt-list-item-number){counter-reset:listItemNumber;}&.pt-list-item-number > .pt-list-item-inner:before{content:${props => getCounterContentForListLevel(props.listLevel)};min-width:1.5rem;position:relative;top:1px;}`;
exports.ListItemInner = styled_components_1.default.div.withConfig({ displayName: "ListItemInner", componentId: "sc-13q3oqg" }) ``;
function getLeftPositionForListLevel(level) {
    switch (Number(level)) {
        case 1:
            return '1.5em';
        case 2:
            return '3em';
        case 3:
            return '4.5em';
        case 4:
            return '6em';
        case 5:
            return '7.5em';
        case 6:
            return '9em';
        case 7:
            return '10.5em';
        case 8:
            return '12em';
        case 9:
            return '13.5em';
        case 10:
            return '15em';
        default:
            return '0em';
    }
}
const bullets = ['●', '○', '■'];
function getContentForListLevelAndStyle(level, style) {
    const normalizedLevel = (level - 1) % 3;
    if (style === 'bullet') {
        return bullets[normalizedLevel];
    }
    return '*';
}
function getCounterIncrementForListLevel(level) {
    switch (level) {
        case 1:
            return 'listItemNumber';
        case 2:
            return 'listItemAlpha';
        case 3:
            return 'listItemRoman';
        case 4:
            return 'listItemNumberNext';
        case 5:
            return 'listItemLetterNext';
        case 6:
            return 'listItemRomanNext';
        case 7:
            return 'listItemNumberNextNext';
        case 8:
            return 'listItemAlphaNextNext';
        case 9:
            return 'listItemRomanNextNext';
        default:
            return 'listItemNumberNextNextNext';
    }
}
function getCounterResetForListLevel(level) {
    switch (level) {
        case 1:
            return 'listItemAlpha';
        case 2:
            return 'listItemRoman';
        case 3:
            return 'listItemNumberNext';
        case 4:
            return 'listItemLetterNext';
        case 5:
            return 'listItemRomanNext';
        case 6:
            return 'listItemNumberNextNext';
        case 7:
            return 'listItemAlphaNextNext';
        case 8:
            return 'listItemRomanNextNext';
        case 9:
            return 'listItemNumberNextNextNext';
        default:
            return 'listItemNumberNextNextNext';
    }
}
function getCounterContentForListLevel(level) {
    switch (level) {
        case 1:
            return `counter(listItemNumber) '. '`;
        case 2:
            return `counter(listItemAlpha, lower-alpha) '. '`;
        case 3:
            return `counter(listItemRoman, lower-roman) '. '`;
        case 4:
            return `counter(listItemNumberNext) '. '`;
        case 5:
            return `counter(listItemLetterNext, lower-alpha) '. '`;
        case 6:
            return `counter(listItemRomanNext, lower-roman) '. '`;
        case 7:
            return `counter(listItemNumberNextNext) '. '`;
        case 8:
            return `counter(listItemAlphaNextNext, lower-alpha) '. '`;
        case 9:
            return `counter(listItemRomanNextNext, lower-roman) '. '`;
        default:
            return `counter(listItemNumberNextNextNext) '. '`;
    }
}
//# sourceMappingURL=index.js.map