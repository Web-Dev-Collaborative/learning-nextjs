import { Node, Element } from 'slate';
import { PathSegment } from '@sanity/types';
import { PortableTextBlock } from '../types/portableText';
declare type Partial<T> = {
    [P in keyof T]?: T[P];
};
export declare function toSlateValue(value: PortableTextBlock[] | undefined, textBlockType: string, keyMap?: {}): Node[];
export declare function fromSlateValue(value: (Node | Partial<Node>)[], textBlockType: string, keyMap?: {}): PortableTextBlock[];
export declare function isEqualToEmptyEditor(children: any, portableTextFeatures: any): boolean;
export declare function findBlockAndIndexFromPath(firstPathSegment: PathSegment, children: (Node | Partial<Node>)[]): [Element | undefined, number | undefined];
export declare function findChildAndIndexFromPath(secondPathSegment: PathSegment, block: Element): [Element | Text | undefined, number];
export {};
//# sourceMappingURL=values.d.ts.map