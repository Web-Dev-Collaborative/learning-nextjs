"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prefixPath = exports.unset = exports.set = exports.insert = exports.diffMatchPatch = exports.setIfMissing = void 0;
const DMP = __importStar(require("diff-match-patch"));
function setIfMissing(value, path = []) {
    return {
        type: 'setIfMissing',
        path,
        value
    };
}
exports.setIfMissing = setIfMissing;
const dmp = new DMP.diff_match_patch();
function diffMatchPatch(currentValue, nextValue, path = []) {
    const patch = dmp
        .patch_make(currentValue, nextValue)
        .map(patch => patch.toString())
        .join('');
    return { type: 'diffMatchPatch', path, value: patch };
}
exports.diffMatchPatch = diffMatchPatch;
function insert(items, position, path = []) {
    return {
        type: 'insert',
        path,
        position,
        items
    };
}
exports.insert = insert;
function set(value, path = []) {
    return { type: 'set', path, value };
}
exports.set = set;
function unset(path = []) {
    return { type: 'unset', path };
}
exports.unset = unset;
function prefixPath(patch, segment) {
    return Object.assign(Object.assign({}, patch), { path: [segment, ...patch.path] });
}
exports.prefixPath = prefixPath;
//# sourceMappingURL=patches.js.map