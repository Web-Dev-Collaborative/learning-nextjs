"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createWithUtils = void 0;
const slate_1 = require("slate");
const debug_1 = require("../../utils/debug");
const debug = debug_1.debugWithName('plugin:withUtils');
/**
 * This plugin makes various util commands available in the editor
 *
 */
function createWithUtils(portableTextFeatures) {
    return function withUtils(editor) {
        // Expands the the selection to wrap around the word the focus is at
        editor.pteExpandToWord = () => {
            const { selection } = editor;
            if (selection && !slate_1.Range.isExpanded(selection)) {
                const [textNode] = slate_1.Editor.node(editor, selection.focus, { depth: 2 });
                if (!textNode || !slate_1.Text.isText(textNode) || textNode.text.length === 0) {
                    debug(`pteExpandToWord: Can't expand to word here`);
                    return;
                }
                const { focus } = selection;
                const focusOffset = focus.offset;
                const charsBefore = textNode.text.slice(0, focusOffset);
                const charsAfter = textNode.text.slice(focusOffset, -1);
                const isEmpty = str => str.match(/\s/g);
                const whiteSpaceBeforeIndex = charsBefore
                    .split('')
                    .reverse()
                    .findIndex(str => isEmpty(str));
                const newStartOffset = whiteSpaceBeforeIndex > -1 ? charsBefore.length - whiteSpaceBeforeIndex : 0;
                const whiteSpaceAfterIndex = charsAfter.split('').findIndex(obj => isEmpty(obj));
                const newEndOffset = charsBefore.length +
                    (whiteSpaceAfterIndex > -1 ? whiteSpaceAfterIndex : charsAfter.length + 1);
                if (!(newStartOffset === newEndOffset || isNaN(newStartOffset) || isNaN(newEndOffset))) {
                    debug('pteExpandToWord: Expanding to focused word');
                    slate_1.Transforms.setSelection(editor, {
                        anchor: Object.assign(Object.assign({}, selection.anchor), { offset: newStartOffset }),
                        focus: Object.assign(Object.assign({}, selection.focus), { offset: newEndOffset })
                    });
                    return;
                }
                debug(`pteExpandToWord: Can't expand to word here`);
            }
        };
        return editor;
    };
}
exports.createWithUtils = createWithUtils;
//# sourceMappingURL=createWithUtils.js.map