"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Block;

var _react = _interopRequireWildcard(require("react"));

var _changeIndicators = require("@sanity/base/lib/change-indicators");

var _diff = require("../../../../diff");

var _helpers = require("../helpers");

var _Block = _interopRequireDefault(require("./Block.css"));

var _Blockquote = _interopRequireDefault(require("./Blockquote"));

var _Header = _interopRequireDefault(require("./Header"));

var _Paragraph = _interopRequireDefault(require("./Paragraph"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Block(_ref) {
  var diff = _ref.diff,
      block = _ref.block,
      children = _ref.children;
  var color = (0, _diff.useDiffAnnotationColor)(diff, []);
  var classNames = [_Block.default.root, _Block.default[diff.action], "style_".concat(diff.displayValue.style || 'undefined')];

  var _React$useContext = _react.default.useContext(_diff.DiffContext),
      fullPath = _React$useContext.path;

  var _React$useContext2 = _react.default.useContext(_changeIndicators.ConnectorContext),
      onSetFocus = _React$useContext2.onSetFocus;

  var isRemoved = diff.action === 'removed';
  var returned = children;
  var handleClick = (0, _react.useCallback)(event => {
    event.stopPropagation();

    if (!isRemoved) {
      onSetFocus(fullPath);
    }
  }, [fullPath, isRemoved]);

  if (block.style === 'blockquote') {
    returned = /*#__PURE__*/_react.default.createElement(_Blockquote.default, null, returned);
  } else if (block.style && (0, _helpers.isHeader)(block)) {
    returned = /*#__PURE__*/_react.default.createElement(_Header.default, {
      style: block.style
    }, returned);
  } else {
    returned = /*#__PURE__*/_react.default.createElement(_Paragraph.default, null, returned);
  }

  var fromStyle; // If style was changed, indicate that

  if (diff.origin.action === 'changed' && diff.origin.fields.style && diff.origin.fields.style.action === 'changed' && diff.origin.fields.style.annotation) {
    fromStyle = diff.origin.fromValue.style;
    classNames.push("changed_from_style_".concat(fromStyle || 'undefined'));
    var style = color ? {
      background: color.background,
      color: color.text
    } : {};
    returned = /*#__PURE__*/_react.default.createElement("div", {
      className: _Block.default.styleIsChanged
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: _Block.default.changedBlockStyleNotice
    }, /*#__PURE__*/_react.default.createElement(_diff.DiffTooltip, {
      annotations: [diff.origin.fields.style.annotation],
      diff: diff.origin.fields.style
    }, /*#__PURE__*/_react.default.createElement("div", null, "Changed block style from '", fromStyle, "'"))), /*#__PURE__*/_react.default.createElement("div", {
      style: style
    }, returned));
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    onClick: handleClick,
    className: classNames.join(' ')
  }, returned);
}