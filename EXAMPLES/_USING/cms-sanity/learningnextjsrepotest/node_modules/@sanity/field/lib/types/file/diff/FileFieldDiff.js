"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileFieldDiff = void 0;

var _fileIcon = _interopRequireDefault(require("part:@sanity/base/file-icon"));

var _react = _interopRequireDefault(require("react"));

var _diff = require("../../../diff");

var _hooks = require("../../../diff/hooks");

var _helpers = require("./helpers");

var _FileFieldDiff = _interopRequireDefault(require("./FileFieldDiff.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FileFieldDiff = _ref => {
  var diff = _ref.diff,
      schemaType = _ref.schemaType;
  var fromValue = diff.fromValue,
      toValue = diff.toValue,
      fields = diff.fields;
  var fromAsset = fromValue === null || fromValue === void 0 ? void 0 : fromValue.asset;
  var toAsset = toValue === null || toValue === void 0 ? void 0 : toValue.asset;
  var prev = (0, _hooks.useRefValue)(fromAsset === null || fromAsset === void 0 ? void 0 : fromAsset._ref);
  var next = (0, _hooks.useRefValue)(toAsset === null || toAsset === void 0 ? void 0 : toAsset._ref);
  var changedFields = Object.keys(fields).filter(name => fields[name].isChanged && name !== '_type');
  var nestedFields = schemaType.fields.filter(field => field.name !== 'asset' && changedFields.includes(field.name)).map(field => field.name);
  var didAssetChange = changedFields.includes('asset'); // Sizes in MB TODO: improve. Apple uses 1000^2

  var prevSize = (prev === null || prev === void 0 ? void 0 : prev.size) && prev.size / 1000 / 1000;
  var nextSize = (next === null || next === void 0 ? void 0 : next.size) && next.size / 1000 / 1000;
  var pctDiff = (0, _helpers.getSizeDiff)(prevSize, nextSize);
  var roundedPrevSize = prevSize ? prevSize.toFixed(2) : undefined;
  var roundedNextSize = nextSize ? nextSize.toFixed(2) : undefined;

  var from = prev && /*#__PURE__*/_react.default.createElement(_diff.DiffCard, {
    as: "del",
    className: _FileFieldDiff.default.card,
    diff: diff,
    path: "asset._ref"
  }, /*#__PURE__*/_react.default.createElement(_diff.MetaInfo, {
    title: prev.originalFilename || 'Untitled',
    icon: _fileIcon.default
  }, /*#__PURE__*/_react.default.createElement("span", null, "".concat(roundedPrevSize, "MB"))));

  var to = next && /*#__PURE__*/_react.default.createElement(_diff.DiffCard, {
    as: "ins",
    className: _FileFieldDiff.default.card,
    diff: diff,
    path: "asset._ref"
  }, /*#__PURE__*/_react.default.createElement(_diff.MetaInfo, {
    title: next.originalFilename || 'Untitled',
    icon: _fileIcon.default
  }, /*#__PURE__*/_react.default.createElement("span", null, "".concat(roundedNextSize, "MB")), pctDiff !== 0 && /*#__PURE__*/_react.default.createElement("div", {
    className: _FileFieldDiff.default.sizeDiff,
    "data-number": pctDiff > 0 ? 'positive' : 'negative'
  }, pctDiff > 0 && '+', pctDiff, "%")));

  return /*#__PURE__*/_react.default.createElement("div", {
    className: _FileFieldDiff.default.root
  }, from && !to && /*#__PURE__*/_react.default.createElement(_diff.DiffTooltip, {
    diff: diff,
    path: "asset._ref",
    description: "Removed"
  }, from), from && to && /*#__PURE__*/_react.default.createElement(_diff.DiffTooltip, {
    diff: diff,
    path: "asset._ref"
  }, /*#__PURE__*/_react.default.createElement(_diff.FromTo, {
    from: from,
    layout: "grid",
    to: to
  })), !from && to && /*#__PURE__*/_react.default.createElement(_diff.DiffTooltip, {
    diff: diff,
    path: "asset._ref",
    description: "Added"
  }, to), nestedFields.length > 0 && /*#__PURE__*/_react.default.createElement("div", {
    className: _FileFieldDiff.default.nestedFields
  }, /*#__PURE__*/_react.default.createElement(_diff.ChangeList, {
    diff: diff,
    schemaType: schemaType,
    fields: nestedFields
  })));
};

exports.FileFieldDiff = FileFieldDiff;