"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChangeTitleSegment = ChangeTitleSegment;

var React = _interopRequireWildcard(require("react"));

var _annotations = require("../annotations");

var _DiffCard = require("./DiffCard");

var _ChangeTitleSegment = _interopRequireDefault(require("./ChangeTitleSegment.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ChangeTitleSegment(_ref) {
  var change = _ref.change,
      segment = _ref.segment;

  if (typeof segment === 'string') {
    return /*#__PURE__*/React.createElement("strong", {
      className: _ChangeTitleSegment.default.text,
      title: segment
    }, segment);
  }

  var hasMoved = segment.hasMoved,
      fromIndex = segment.fromIndex,
      toIndex = segment.toIndex,
      annotation = segment.annotation;
  var created = typeof fromIndex === 'undefined';
  var deleted = typeof toIndex === 'undefined';

  if (created) {
    // Item was created
    return /*#__PURE__*/React.createElement(CreatedTitleSegment, {
      annotation: annotation,
      change: change,
      toIndex: toIndex
    });
  }

  if (deleted) {
    // Item was deleted
    return /*#__PURE__*/React.createElement(DeletedTitleSegment, {
      annotation: annotation,
      fromIndex: fromIndex
    });
  }

  if (hasMoved && typeof toIndex !== 'undefined' && typeof fromIndex !== 'undefined') {
    // Item was moved
    return /*#__PURE__*/React.createElement(MovedTitleSegment, {
      annotation: annotation,
      fromIndex: fromIndex,
      toIndex: toIndex
    });
  } // Changed/unchanged


  var readableIndex = (toIndex || 0) + 1;
  return /*#__PURE__*/React.createElement("span", {
    className: _ChangeTitleSegment.default.indexGroup
  }, "#", readableIndex);
}

function CreatedTitleSegment(_ref2) {
  var annotationProp = _ref2.annotation,
      change = _ref2.change,
      _ref2$toIndex = _ref2.toIndex,
      toIndex = _ref2$toIndex === void 0 ? 0 : _ref2$toIndex;
  var readableIndex = toIndex + 1;
  var description = "Added in position ".concat(readableIndex);
  var content = /*#__PURE__*/React.createElement(React.Fragment, null, "#", readableIndex);
  var diffAnnotation = change !== null && change !== void 0 && change.diff ? (0, _annotations.getAnnotationAtPath)(change.diff, []) : undefined;
  var annotation = diffAnnotation || annotationProp;

  if (annotation) {
    return /*#__PURE__*/React.createElement(_DiffCard.DiffCard, {
      annotation: annotation,
      as: "ins",
      className: _ChangeTitleSegment.default.indexGroup,
      tooltip: {
        description
      }
    }, content);
  }

  return /*#__PURE__*/React.createElement("span", {
    className: _ChangeTitleSegment.default.indexGroup
  }, content);
}

function DeletedTitleSegment(_ref3) {
  var annotation = _ref3.annotation,
      _ref3$fromIndex = _ref3.fromIndex,
      fromIndex = _ref3$fromIndex === void 0 ? 0 : _ref3$fromIndex;
  var readableIndex = fromIndex + 1;
  var description = "Removed from position ".concat(readableIndex);
  return /*#__PURE__*/React.createElement(_DiffCard.DiffCard, {
    annotation: annotation || null,
    className: _ChangeTitleSegment.default.indexGroup,
    as: "del",
    tooltip: {
      description
    }
  }, "#", readableIndex);
}

function MovedTitleSegment(_ref4) {
  var annotation = _ref4.annotation,
      fromIndex = _ref4.fromIndex,
      toIndex = _ref4.toIndex;
  var indexDiff = toIndex - fromIndex;
  var indexSymbol = indexDiff < 0 ? '↑' : '↓';
  var positions = Math.abs(indexDiff);
  var description = "Moved ".concat(positions, " position").concat(positions === 1 ? '' : 's', " ").concat(indexDiff < 0 ? 'up' : 'down');
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("span", {
    className: _ChangeTitleSegment.default.indexGroup
  }, "#", toIndex + 1), /*#__PURE__*/React.createElement(_DiffCard.DiffCard, {
    annotation: annotation,
    className: _ChangeTitleSegment.default.indexGroup,
    as: "span",
    tooltip: {
      description
    }
  }, indexSymbol, Math.abs(indexDiff)));
}