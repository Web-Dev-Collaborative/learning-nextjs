"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DiffStringSegment = DiffStringSegment;
exports.DiffString = DiffString;

var React = _interopRequireWildcard(require("react"));

var _DiffCard = require("./DiffCard");

var _DiffString = _interopRequireDefault(require("./DiffString.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function DiffStringSegment(_ref) {
  var segment = _ref.segment;
  var text = segment.text;

  if (segment.action === 'added') {
    return /*#__PURE__*/React.createElement(_DiffCard.DiffCard, {
      annotation: segment.annotation,
      as: "ins",
      className: _DiffString.default.changedSegment,
      disableHoverEffect: true,
      tooltip: {
        description: 'Added'
      }
    }, text);
  }

  if (segment.action === 'removed') {
    return /*#__PURE__*/React.createElement(_DiffCard.DiffCard, {
      annotation: segment.annotation,
      as: "del",
      className: _DiffString.default.changedSegment,
      disableHoverEffect: true,
      tooltip: {
        description: 'Removed'
      }
    }, text);
  }

  return /*#__PURE__*/React.createElement("span", {
    className: _DiffString.default.segment
  }, text);
}

function DiffString(_ref2) {
  var diff = _ref2.diff;
  return /*#__PURE__*/React.createElement(React.Fragment, null, (diff.segments || []).map((segment, segmentIndex) => /*#__PURE__*/React.createElement(DiffStringSegment // eslint-disable-next-line react/no-array-index-key
  , {
    key: segmentIndex,
    segment: segment
  })));
}