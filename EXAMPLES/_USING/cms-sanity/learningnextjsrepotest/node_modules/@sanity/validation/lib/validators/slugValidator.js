"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slugValidator = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = require('lodash'),
    get = _require.get,
    memoize = _require.memoize;

var getClient = require('../getClient');

var memoizedWarnOnArraySlug = memoize(warnOnArraySlug);

function getDocumentIds(id) {
  var isDraft = id.indexOf('drafts.') === 0;
  return {
    published: isDraft ? id.slice('drafts.'.length) : id,
    draft: isDraft ? id : "drafts.".concat(id)
  };
}

function serializePath(path) {
  return path.reduce((target, part, i) => {
    var isIndex = typeof part === 'number';
    var isKey = part && part._key;
    var separator = i === 0 ? '' : '.';
    var add = isIndex || isKey ? '[]' : "".concat(separator).concat(part);
    return "".concat(target).concat(add);
  }, '');
}

var defaultIsUnique = (slug, options) => {
  var document = options.document,
      path = options.path,
      type = options.type;
  var disableArrayWarning = type.options.disableArrayWarning;

  var _getDocumentIds = getDocumentIds(document._id),
      published = _getDocumentIds.published,
      draft = _getDocumentIds.draft;

  var docType = document._type;
  var atPath = serializePath(path.concat('current'));

  if (!disableArrayWarning && atPath.includes('[]')) {
    memoizedWarnOnArraySlug(serializePath(path));
  }

  var constraints = ['_type == $docType', "!(_id in [$draft, $published])", "".concat(atPath, " == $slug")].join(' && ');
  return getClient().fetch("!defined(*[".concat(constraints, "][0]._id)"), {
    docType,
    draft,
    published,
    slug
  }, {
    tag: 'validation.slug-is-unique'
  });
};

function warnOnArraySlug(path) {
  /* eslint-disable no-console */
  console.warn(["Slug field at path ".concat(path, " is within an array and cannot be automatically checked for uniqueness"), "If you need to check for uniqueness, provide your own \"isUnique\" method", "To disable this message, set `disableArrayWarning: true` on the slug `options` field"].join('\n'));
  /* eslint-enable no-console */
}

var slugValidator = (value, options) => {
  if (!value) {
    return true;
  }

  if (!value.current) {
    return 'Slug must have a value';
  }

  var errorMessage = 'Slug is already in use';
  var isUnique = get(options, 'type.options.isUnique', defaultIsUnique);
  return Promise.resolve(isUnique(value.current, _objectSpread(_objectSpread({}, options), {}, {
    defaultIsUnique
  }))).then(slugIsUnique => slugIsUnique ? true : errorMessage);
};

exports.slugValidator = slugValidator;