"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTimeAgo = useTimeAgo;

var _react = require("react");

var _dateFns = require("date-fns");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var FIVE_SECONDS = 1000 * 5;
var TWENTY_SECONDS = 1000 * 20;
var ONE_MINUTE = 1000 * 60;
var ONE_HOUR = ONE_MINUTE * 60;

function useTimeAgo(time) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      minimal = _ref.minimal,
      agoSuffix = _ref.agoSuffix;

  var _useState = (0, _react.useState)(() => formatRelativeTime(time, {
    minimal,
    agoSuffix
  })),
      _useState2 = _slicedToArray(_useState, 2),
      resolved = _useState2[0],
      setResolved = _useState2[1];

  (0, _react.useEffect)(() => {
    setResolved(formatRelativeTime(time, {
      minimal,
      agoSuffix
    }));
  }, [time, minimal, agoSuffix]);
  (0, _react.useEffect)(() => {
    var id = Number.isFinite(resolved.refreshInterval) ? window.setInterval(() => setResolved(formatRelativeTime(time, {
      minimal,
      agoSuffix
    })), resolved.refreshInterval) : undefined;
    return () => clearInterval(id);
  }, [time, minimal, resolved.refreshInterval, agoSuffix]);
  return resolved.timestamp;
}

function formatRelativeTime(date) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var now = Date.now();
  var parsedDate = date instanceof Date ? date : new Date(date);
  var diffMonths = (0, _dateFns.differenceInMonths)(now, parsedDate);
  var diffYears = (0, _dateFns.differenceInYears)(now, parsedDate);

  if (diffMonths || diffYears) {
    if (opts.minimal && diffYears === 0) {
      // same year
      return {
        timestamp: (0, _dateFns.format)(parsedDate, 'MMM d'),
        refreshInterval: +Infinity
      };
    }

    if (opts.minimal) {
      return {
        timestamp: (0, _dateFns.format)(parsedDate, 'MMM d, yyyy'),
        refreshInterval: +Infinity
      };
    }

    return {
      timestamp: (0, _dateFns.format)(parsedDate, 'MMM d, yyyy, hh:mm a'),
      refreshInterval: +Infinity
    };
  }

  var diffWeeks = (0, _dateFns.differenceInWeeks)(now, parsedDate);

  if (diffWeeks) {
    if (opts.minimal) {
      return {
        timestamp: opts.agoSuffix ? "".concat(diffWeeks, "w ago") : "".concat(diffWeeks, "w"),
        refreshInterval: ONE_HOUR
      };
    }

    return {
      timestamp: opts.agoSuffix ? "".concat(diffWeeks, " weeks ago") : "".concat(diffWeeks, " weeks"),
      refreshInterval: ONE_HOUR
    };
  }

  var diffDays = (0, _dateFns.differenceInDays)(now, parsedDate);

  if (diffDays) {
    if (opts.minimal) {
      var _daysSince = opts.agoSuffix ? "".concat(diffDays, "d ago") : "".concat(diffDays, "d");

      return {
        timestamp: diffDays === 1 ? 'yesterday' : _daysSince,
        refreshInterval: ONE_HOUR
      };
    }

    var daysSince = opts.agoSuffix ? "".concat(diffDays, " days ago") : "".concat(diffDays, " days");
    return {
      timestamp: diffDays === 1 ? 'yesterday' : daysSince,
      refreshInterval: ONE_HOUR
    };
  }

  var diffHours = (0, _dateFns.differenceInHours)(now, parsedDate);

  if (diffHours) {
    if (opts.minimal) {
      return {
        timestamp: opts.agoSuffix ? "".concat(diffHours, "h ago") : "".concat(diffHours, "h"),
        refreshInterval: ONE_MINUTE
      };
    }

    return {
      timestamp: opts.agoSuffix ? "".concat(diffHours, " hours ago") : "".concat(diffHours, " hours"),
      refreshInterval: ONE_MINUTE
    };
  }

  var diffMins = (0, _dateFns.differenceInMinutes)(now, parsedDate);

  if (diffMins) {
    if (opts.minimal) {
      return {
        timestamp: opts.agoSuffix ? "".concat(diffMins, "m ago") : "".concat(diffMins, "m"),
        refreshInterval: TWENTY_SECONDS
      };
    }

    return {
      timestamp: opts.agoSuffix ? "".concat(diffMins, " minutes ago") : "".concat(diffMins, " minutes"),
      refreshInterval: TWENTY_SECONDS
    };
  }

  var diffSeconds = (0, _dateFns.differenceInSeconds)(now, parsedDate);

  if (diffSeconds > 10) {
    if (opts.minimal) {
      return {
        timestamp: opts.agoSuffix ? "".concat(diffSeconds, "s ago") : "".concat(diffSeconds, "s"),
        refreshInterval: FIVE_SECONDS
      };
    }

    return {
      timestamp: opts.agoSuffix ? "".concat(diffSeconds, " seconds ago") : "".concat(diffSeconds, " seconds"),
      refreshInterval: FIVE_SECONDS
    };
  }

  return {
    timestamp: 'just now',
    refreshInterval: FIVE_SECONDS
  };
}