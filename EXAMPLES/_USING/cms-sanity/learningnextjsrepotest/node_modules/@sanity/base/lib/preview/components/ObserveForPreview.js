"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _warningIcon = _interopRequireDefault(require("part:@sanity/base/warning-icon"));

var _reactPropsStream = require("react-props-stream");

var _shallowEquals = _interopRequireDefault(require("shallow-equals"));

var _operators = require("rxjs/operators");

var _rxjs = require("rxjs");

var _ = require("../");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var INVALID_PREVIEW_FALLBACK = {
  title: /*#__PURE__*/_react.default.createElement("span", {
    style: {
      fontStyle: 'italic'
    }
  }, "Invalid preview config"),
  subtitle: /*#__PURE__*/_react.default.createElement("span", {
    style: {
      fontStyle: 'italic'
    }
  }, "Check the error log in the console"),
  media: _warningIcon.default
};

function isNonNullable(value) {
  return value !== null && value !== undefined;
} // Will track a memo of the value as long as the isActive$ stream emits true,
// and emit the memoized value after it switches to to false
// (disclaimer: there's probably a better way to do this)


function memoizeBy(isActive$) {
  return producer$ => {
    var memo;
    return isActive$.pipe((0, _operators.distinctUntilChanged)(), (0, _operators.switchMap)(isActive => isActive ? producer$.pipe((0, _operators.tap)(v => memo = v)) : (0, _rxjs.of)(memo).pipe((0, _operators.filter)(isNonNullable))));
  };
}

var connect = props$ => {
  var sharedProps$ = props$.pipe((0, _operators.publishReplay)(1), (0, _operators.refCount)());
  var isActive$ = sharedProps$.pipe((0, _operators.map)(props => props.isActive !== false));
  return sharedProps$.pipe((0, _operators.distinctUntilChanged)((props, nextProps) => (0, _shallowEquals.default)(props.value, nextProps.value)), (0, _operators.switchMap)(props => (0, _rxjs.concat)((0, _rxjs.of)({
    isLoading: true,
    type: props.type,
    children: props.children,
    snapshot: null
  }), (0, _.observeForPreview)(props.value, props.type, props.fields, props.ordering ? {
    ordering: props.ordering
  } : {}).pipe((0, _operators.map)(result => ({
    isLoading: false,
    type: props.type,
    snapshot: result.snapshot,
    children: props.children
  }))))), memoizeBy(isActive$));
};

var _default = (0, _reactPropsStream.withPropsStream)(connect, function ObserveForPreview(props) {
  var snapshot = props.snapshot,
      type = props.type,
      error = props.error,
      isLoading = props.isLoading,
      children = props.children;
  return children({
    error,
    isLoading,
    result: {
      type,
      snapshot: snapshot === _constants.INVALID_PREVIEW_CONFIG ? INVALID_PREVIEW_FALLBACK : snapshot
    }
  });
});

exports.default = _default;