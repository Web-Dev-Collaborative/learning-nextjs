{
  "version": 3,
  "sources": ["../../../../src/components/menu/menu.tsx"],
  "sourcesContent": ["import React, {forwardRef, useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport styled from 'styled-components'\nimport {useClickOutside, useGlobalKeyDown} from '../../hooks'\nimport {Box, Stack} from '../../primitives'\nimport {ResponsivePaddingProps} from '../../primitives/types'\nimport {useLayer} from '../../utils'\nimport {getFocusableElements} from './helpers'\nimport {MenuContext, MenuContextValue} from './menuContext'\n\n/**\n * @public\n */\nexport interface MenuProps extends ResponsivePaddingProps {\n  /**\n   * @deprecated Use `shouldFocus=\"first\"` instead.\n   */\n  focusFirst?: boolean\n  /**\n   * @deprecated Use `shouldFocus=\"last\"` instead.\n   */\n  focusLast?: boolean\n  onClickOutside?: (event: MouseEvent) => void\n  onEscape?: () => void\n  onItemClick?: () => void\n  onItemSelect?: (index: number) => void\n  originElement?: HTMLElement | null\n  registerElement?: (el: HTMLElement) => () => void\n  shouldFocus?: 'first' | 'last' | null\n  space?: number | number[]\n}\n\nconst Root = styled(Box)`\n  outline: none;\n  overflow: auto;\n`\n\n/**\n * @public\n */\nexport const Menu = forwardRef(function Menu(\n  props: MenuProps & Omit<React.HTMLProps<HTMLDivElement>, 'as' | 'height' | 'role' | 'tabIndex'>,\n  ref\n) {\n  const {\n    children,\n    focusFirst,\n    focusLast,\n    onClickOutside,\n    onEscape,\n    onItemClick,\n    onItemSelect,\n    onKeyDown,\n    originElement,\n    padding = 1,\n    registerElement,\n    shouldFocus = (props.focusFirst && 'first') || (props.focusLast && 'last') || null,\n    space = 1,\n    ...restProps\n  } = props\n  const {isTopLayer} = useLayer()\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const itemsRef = useRef<HTMLElement[]>([])\n  const [activeIndex, setActiveIndex] = useState(-1)\n  const [activeElement, setActiveElement] = useState<HTMLElement | null>(null)\n  const activeElementRef = useRef<HTMLElement | null>(activeElement)\n\n  // Trigger `onItemSelect` when active index changes\n  useEffect(() => {\n    if (onItemSelect) onItemSelect(activeIndex)\n  }, [activeIndex, onItemSelect])\n\n  // Update active element\n  useEffect(() => {\n    activeElementRef.current = activeElement\n  }, [activeElement])\n\n  // Auto-focus item after render\n  useEffect(() => {\n    if (!shouldFocus) return\n\n    const rafId = window.requestAnimationFrame(() => {\n      if (rootElement) {\n        if (activeElementRef.current) {\n          activeElementRef.current.focus()\n          setActiveIndex(itemsRef.current.indexOf(activeElementRef.current))\n\n          return\n        }\n\n        const element = itemsRef.current[shouldFocus === 'last' ? itemsRef.current.length - 1 : 0]\n\n        if (element) {\n          element.focus()\n          setActiveIndex(itemsRef.current.indexOf(element))\n        }\n      }\n    })\n\n    return () => {\n      window.cancelAnimationFrame(rafId)\n    }\n  }, [rootElement, shouldFocus])\n\n  const setRef = useCallback(\n    (el: HTMLDivElement | null) => {\n      setRootElement(el)\n      if (typeof ref === 'function') ref(el)\n      else if (ref) ref.current = el\n    },\n    [ref]\n  )\n\n  const mount = useCallback((element: HTMLElement | null, selected?: boolean) => {\n    if (!element) return () => undefined\n\n    if (!itemsRef.current.includes(element)) {\n      itemsRef.current.push(element)\n    }\n\n    if (selected === true) {\n      setActiveElement(element)\n    }\n\n    return () => {\n      const idx = itemsRef.current.push(element)\n\n      if (idx > -1) {\n        itemsRef.current.splice(idx, 1)\n      }\n    }\n  }, [])\n\n  const handleKeyDown = useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      // Move focus to the element that opened the menu before handling the `Tab` press\n      if (event.key === 'Tab') {\n        if (originElement) {\n          originElement.focus()\n        }\n\n        return\n      }\n\n      // Move focus to the first focusable menuitem\n      if (event.key === 'Home') {\n        event.preventDefault()\n        event.stopPropagation()\n\n        const focusableElements = getFocusableElements(itemsRef.current)\n        const el = focusableElements[0]\n\n        if (el) {\n          const currentIndex = itemsRef.current.indexOf(el.element)\n\n          setActiveIndex(currentIndex)\n          el.element.focus()\n        }\n\n        return\n      }\n\n      // Move focus to the last focusable menuitem\n      if (event.key === 'End') {\n        event.preventDefault()\n        event.stopPropagation()\n\n        const focusableElements = getFocusableElements(itemsRef.current)\n        const el = focusableElements[focusableElements.length - 1]\n\n        if (el) {\n          const currentIndex = itemsRef.current.indexOf(el.element)\n\n          setActiveIndex(currentIndex)\n          el.element.focus()\n        }\n\n        return\n      }\n\n      if (event.key === 'ArrowUp') {\n        event.preventDefault()\n        event.stopPropagation()\n\n        const focusableElements = getFocusableElements(itemsRef.current)\n        const focusableLen = focusableElements.filter(({focusable}) => focusable).length\n\n        if (focusableLen === 0) return\n\n        const len = focusableElements.length\n\n        let currentIndex = activeIndex\n        let focusable = false\n        let element: HTMLElement | null = null\n\n        while (!focusable) {\n          currentIndex = (currentIndex - 1 + len) % len\n          element = focusableElements[currentIndex].element\n          focusable = focusableElements[currentIndex].focusable\n        }\n\n        setActiveIndex(currentIndex)\n\n        if (element) element.focus()\n\n        return\n      }\n\n      if (event.key === 'ArrowDown') {\n        event.preventDefault()\n        event.stopPropagation()\n\n        const focusableElements = getFocusableElements(itemsRef.current)\n        const focusableLen = focusableElements.filter(({focusable}) => focusable).length\n\n        if (focusableLen === 0) return\n\n        const len = focusableElements.length\n\n        let currentIndex = activeIndex\n        let focusable = false\n        let element: HTMLElement | null = null\n\n        while (!focusable) {\n          currentIndex = (currentIndex + 1) % len\n          element = focusableElements[currentIndex].element\n          focusable = focusableElements[currentIndex].focusable\n        }\n\n        setActiveIndex(currentIndex)\n\n        if (element) element.focus()\n\n        return\n      }\n\n      if (onKeyDown) {\n        onKeyDown(event)\n      }\n    },\n    [activeIndex, onKeyDown, originElement]\n  )\n\n  const handleItemMouseEnter = useCallback((event: React.MouseEvent<HTMLElement>) => {\n    const element = event.currentTarget\n\n    setActiveIndex(itemsRef.current.indexOf(element))\n\n    element.focus()\n  }, [])\n\n  const handleItemMouseLeave = useCallback(() => {\n    setActiveIndex(-1)\n    rootElement?.focus()\n  }, [rootElement])\n\n  useClickOutside(\n    useCallback(\n      (event) => isTopLayer && onClickOutside && onClickOutside(event),\n      [isTopLayer, onClickOutside]\n    ),\n    [rootElement]\n  )\n\n  useGlobalKeyDown(\n    useCallback(\n      (event) => {\n        if (!isTopLayer) return\n\n        if (event.key === 'Escape') {\n          event.stopPropagation()\n          if (onEscape) onEscape()\n        }\n      },\n      [isTopLayer, onEscape]\n    )\n  )\n\n  useEffect(() => {\n    if (!rootElement || !registerElement) return\n\n    return registerElement(rootElement)\n  }, [registerElement, rootElement])\n\n  const value: MenuContextValue = useMemo(\n    () => ({\n      version: 0.0,\n      activeElement,\n      activeIndex,\n      mount,\n      onClickOutside,\n      onEscape,\n      onMouseEnter: handleItemMouseEnter,\n      onMouseLeave: handleItemMouseLeave,\n      onItemClick,\n      registerElement,\n    }),\n    [\n      activeElement,\n      activeIndex,\n      mount,\n      handleItemMouseEnter,\n      handleItemMouseLeave,\n      onClickOutside,\n      onEscape,\n      onItemClick,\n      registerElement,\n    ]\n  )\n\n  return (\n    <MenuContext.Provider value={value}>\n      <Root\n        data-ui=\"Menu\"\n        {...restProps}\n        onKeyDown={handleKeyDown}\n        padding={padding}\n        ref={setRef}\n        role=\"menu\"\n        tabIndex={-1}\n      >\n        <Stack space={space}>{children}</Stack>\n      </Root>\n    </MenuContext.Provider>\n  )\n})\n"],
  "mappings": "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",
  "names": []
}
