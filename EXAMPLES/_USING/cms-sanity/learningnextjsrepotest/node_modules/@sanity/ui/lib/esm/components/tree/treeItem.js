var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import { useId } from "@reach/auto-id";
import { ToggleArrowRightIcon } from "@sanity/icons";
import React, { createElement, useCallback, useEffect, useMemo, useRef } from "react";
import styled, { css } from "styled-components";
import { Box, Flex, Text } from "../../primitives";
import { rem } from "../../styles";
import { TreeContext } from "./treeContext";
import { TreeGroup } from "./treeGroup";
import { useTree } from "./useTree";
const Root = styled.li((props) => {
  const { theme } = props;
  const { card, muted } = theme.sanity.color;
  return css`
    --treeitem-bg-color: ${card.enabled.bg};
    --card-fg-color: ${card.enabled.fg};

    &[data-selected] {
      --treeitem-bg-color: ${card.pressed.bg};
      --card-fg-color: ${card.pressed.fg};
    }

    &[role='none'] > [role='treeitem'] {
      outline: none;
      cursor: default;
      background-color: var(--treeitem-bg-color);
      color: var(--treeitem-fg-color);
      border-radius: 3px;

      &:not(:focus):hover {
        --treeitem-bg-color: ${muted.default.hovered.bg};
        --card-fg-color: ${muted.default.hovered.fg};
      }

      &:focus {
        --treeitem-bg-color: ${card.selected.bg};
        --card-fg-color: ${card.selected.fg};
        position: relative;
      }
    }

    &[role='treeitem'] {
      outline: none;

      & > div {
        cursor: default;
        background-color: var(--treeitem-bg-color);
        color: var(--card-fg-color);
        border-radius: 3px;
      }

      &:not(:focus) > div:hover {
        --treeitem-bg-color: ${muted.default.hovered.bg};
        --card-fg-color: ${muted.default.hovered.fg};
      }

      &:focus > div {
        --treeitem-bg-color: ${card.selected.bg};
        --card-fg-color: ${card.selected.fg};
        position: relative;
      }
    }
  `;
});
const TreeItemBox = styled(Box)((props) => {
  const { $level, theme } = props;
  const { space } = theme.sanity;
  return css`
    padding-left: ${rem(space[2] * $level)};

    &[data-as='a'] {
      text-decoration: none;
    }
  `;
});
const ToggleArrowText = styled(Text)`
  & > svg {
    transition: transform 100ms;
  }
`;
function TreeItem(props) {
  const _a = props, {
    children,
    expanded: expandedProp = false,
    fontSize,
    href,
    icon,
    id: idProp,
    muted,
    onClick,
    padding = 3,
    selected = false,
    space = 2,
    text,
    weight
  } = _a, restProps = __objRest(_a, [
    "children",
    "expanded",
    "fontSize",
    "href",
    "icon",
    "id",
    "muted",
    "onClick",
    "padding",
    "selected",
    "space",
    "text",
    "weight"
  ]);
  const rootRef = useRef(null);
  const treeitemRef = useRef(null);
  const tree = useTree();
  const { path, registerItem, setExpanded, setFocusedElement } = tree;
  const id = useId(idProp) || idProp;
  const itemPath = useMemo(() => path.concat([id || ""]), [id, path]);
  const itemKey = itemPath.join("/");
  const itemState = tree.state[itemKey];
  const focused = tree.focusedElement === rootRef.current;
  const expanded = (itemState == null ? void 0 : itemState.expanded) === void 0 ? expandedProp : (itemState == null ? void 0 : itemState.expanded) || false;
  const tabIndex = tree.focusedElement && tree.focusedElement === rootRef.current ? 0 : -1;
  const contextValue = useMemo(() => __spreadProps(__spreadValues({}, tree), { level: tree.level + 1, path: itemPath }), [itemPath, tree]);
  const handleClick = useCallback((event) => {
    if (onClick)
      onClick(event);
    const target = event.target;
    if (target instanceof HTMLElement && (target.getAttribute("data-ui") === "TreeItem__box" || target.closest('[data-ui="TreeItem__box"]'))) {
      event.stopPropagation();
      setExpanded(itemKey, !expanded);
      setFocusedElement(rootRef.current);
    }
  }, [expanded, itemKey, onClick, setExpanded, setFocusedElement]);
  const handleKeyDown = useCallback((event) => {
    if (focused && event.key === "Enter") {
      const el = treeitemRef.current || rootRef.current;
      el == null ? void 0 : el.click();
    }
  }, [focused]);
  useEffect(() => {
    if (!rootRef.current)
      return;
    return registerItem(rootRef.current, itemPath.join("/"), expanded, selected);
  }, [expanded, itemPath, registerItem, selected]);
  const content = /* @__PURE__ */ React.createElement(Flex, {
    padding
  }, /* @__PURE__ */ React.createElement(Box, {
    marginRight: space,
    style: { visibility: icon || children ? "visible" : "hidden", pointerEvents: "none" }
  }, icon && /* @__PURE__ */ React.createElement(Text, {
    muted,
    size: fontSize,
    weight
  }, createElement(icon)), !icon && /* @__PURE__ */ React.createElement(ToggleArrowText, {
    muted,
    size: fontSize,
    weight
  }, /* @__PURE__ */ React.createElement(ToggleArrowRightIcon, {
    style: { transform: expanded ? "rotate(90deg)" : void 0 }
  }))), /* @__PURE__ */ React.createElement(Box, {
    flex: 1
  }, /* @__PURE__ */ React.createElement(Text, {
    muted,
    size: fontSize,
    textOverflow: "ellipsis",
    weight
  }, text)));
  if (href) {
    return /* @__PURE__ */ React.createElement(Root, __spreadProps(__spreadValues({
      "data-selected": selected ? "" : void 0,
      "data-tree-id": id,
      "data-tree-key": itemKey,
      "data-ui": "TreeItem"
    }, restProps), {
      onClick: handleClick,
      ref: rootRef,
      role: "none"
    }), /* @__PURE__ */ React.createElement(TreeItemBox, {
      $level: tree.level,
      "aria-expanded": expanded,
      "data-ui": "TreeItem__box",
      forwardedAs: "a",
      href,
      ref: treeitemRef,
      role: "treeitem",
      tabIndex
    }, content), /* @__PURE__ */ React.createElement(TreeContext.Provider, {
      value: contextValue
    }, children && /* @__PURE__ */ React.createElement(TreeGroup, {
      hidden: !expanded
    }, children)));
  }
  return /* @__PURE__ */ React.createElement(Root, __spreadProps(__spreadValues({
    "data-selected": selected ? "" : void 0,
    "data-ui": "TreeItem",
    "data-tree-id": id,
    "data-tree-key": itemKey
  }, restProps), {
    "aria-expanded": expanded,
    onClick: handleClick,
    onKeyDown: handleKeyDown,
    ref: rootRef,
    role: "treeitem",
    tabIndex
  }), /* @__PURE__ */ React.createElement(TreeItemBox, {
    $level: tree.level,
    "data-ui": "TreeItem__box"
  }, content), /* @__PURE__ */ React.createElement(TreeContext.Provider, {
    value: contextValue
  }, children && /* @__PURE__ */ React.createElement(TreeGroup, {
    expanded
  }, children)));
}
export {
  TreeItem
};
