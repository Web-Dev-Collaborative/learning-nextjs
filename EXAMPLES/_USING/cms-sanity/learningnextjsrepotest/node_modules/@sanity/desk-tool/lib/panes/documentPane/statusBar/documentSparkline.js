"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentSparkline = DocumentSparkline;

var _react = _interopRequireDefault(require("react"));

var _syncIcon = _interopRequireDefault(require("part:@sanity/base/sync-icon"));

var _reactHooks = require("@sanity/react-hooks");

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _containerQuery = require("part:@sanity/components/container-query");

var _hooks = require("@sanity/base/hooks");

var _documentHistory = require("../documentHistory");

var _icons = require("../../../badges/icons");

var _helpers = require("../timeline/helpers");

var _documentSparkline = _interopRequireDefault(require("./documentSparkline.css"));

var _constants = require("./constants");

var _documentBadges = require("./documentBadges");

var _hooks2 = require("./hooks");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var SESSION_BADGE_STYLE = {
  position: 'absolute',
  top: 0,
  left: 0,
  transform: 'translate(0, 0, 0)'
};

var SessionBadge = _ref => {
  var icon = _ref.icon,
      title = _ref.title,
      type = _ref.type,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style;
  var iconComponent = type && type !== 'live' ? (0, _helpers.getTimelineEventIconComponent)(type) || /*#__PURE__*/_react.default.createElement("code", null, type) : icon;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: _documentSparkline.default.badge,
    "data-type": type,
    title: title,
    style: style
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: _documentSparkline.default.icon
  }, /*#__PURE__*/_react.default.createElement(icon || iconComponent)), /*#__PURE__*/_react.default.createElement("span", {
    className: "".concat(_documentSparkline.default.icon, " ").concat(_documentSparkline.default.hoverIcon)
  }, /*#__PURE__*/_react.default.createElement(_icons.HistoryIcon, null)));
};

function DocumentSparkline(_ref2) {
  var badges = _ref2.badges,
      lastUpdated = _ref2.lastUpdated,
      editState = _ref2.editState;

  var _React$useState = _react.default.useState(''),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      transitionDirection = _React$useState2[0],
      setTransitionDirection = _React$useState2[1];

  var _useDocumentHistory = (0, _documentHistory.useDocumentHistory)(),
      openHistory = _useDocumentHistory.open,
      historyController = _useDocumentHistory.historyController,
      timeline = _useDocumentHistory.timeline;

  var showingRevision = historyController.onOlderRevision();
  var showingChangePanel = historyController.changesPanelActive();
  var syncState = (0, _reactHooks.useSyncState)(timeline === null || timeline === void 0 ? void 0 : timeline.publishedId);
  var isLiveDocument = editState === null || editState === void 0 ? void 0 : editState.liveEdit;
  var chunks = timeline.mapChunks(chunk => chunk); // Find the first unpublish or publish event and use it as the base event if it exists

  var lastUnpublishOrPublishSession = chunks.find(chunk => chunk.type === 'unpublish' || chunk.type === 'publish');
  var lastPublishedTimeAgo = (0, _hooks.useTimeAgo)((lastUnpublishOrPublishSession === null || lastUnpublishOrPublishSession === void 0 ? void 0 : lastUnpublishOrPublishSession.endTimestamp) || '', {
    minimal: true,
    agoSuffix: true
  });
  var lastUpdatedTimeAgo = (0, _hooks.useTimeAgo)(lastUpdated || '', {
    minimal: true,
    agoSuffix: true
  }); // Make sure we only show editDraft sessions (and count the unpublish as a draft session)

  var filteredSessions = lastUnpublishOrPublishSession ? chunks.filter(session => (session.type === 'editDraft' || session.type === 'unpublish') && session.index >= lastUnpublishOrPublishSession.index) : chunks.filter(session => session.type === 'editDraft'); // Track the amount of sessions for the transition to work

  var prevSessionsCount = (0, _hooks2.usePrevious)(filteredSessions.length);

  _react.default.useEffect(() => {
    // If we have more sessions than before, transition the changes button in
    if (filteredSessions.length > prevSessionsCount) {
      setTransitionDirection('in');
    } // If we have less sessions than before, or if there are no longer any draft sessions
    // transition the changes button out


    if (prevSessionsCount > filteredSessions.length && filteredSessions.length === 0) {
      setTransitionDirection('out');
    } // Reset the transition after 0.8s


    var animateTimer = setTimeout(() => {
      setTransitionDirection('');
    }, 800);
    return () => {
      clearTimeout(animateTimer);
    };
  }, [filteredSessions.length, prevSessionsCount]); // Only show a max number of edit sessions in the sessions button


  var sessionsSliced = filteredSessions.slice(0, _constants.MAX_SESSIONS).reverse(); // To enable transitions with position absolute and translate3d
  // give the session container the correct width based on amount of sessions

  var sessionContainerWidth = sessionsSliced.length === 1 ? _constants.SESSION_BADGE_SIZE : sessionsSliced.length * _constants.SESSION_BADGE_MARGIN + _constants.SESSION_BADGE_SIZE - _constants.SESSION_BADGE_MARGIN; // Only show a published session badge if the base event was a publish event
  // and we don't have a live document

  var showPublishedSessionBadge = (lastUnpublishOrPublishSession === null || lastUnpublishOrPublishSession === void 0 ? void 0 : lastUnpublishOrPublishSession.type) === 'publish' && !isLiveDocument;
  return /*#__PURE__*/_react.default.createElement(_containerQuery.ContainerQuery, {
    className: _documentSparkline.default.root,
    "data-disabled": showingRevision
  }, showPublishedSessionBadge && /*#__PURE__*/_react.default.createElement("div", {
    className: _documentSparkline.default.primarySessionBadgeContainer
  }, /*#__PURE__*/_react.default.createElement(SessionBadge, {
    type: "publish",
    icon: _icons.PublishIcon,
    title: (0, _helpers.formatTimelineEventLabel)('publish')
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: _documentSparkline.default.statusDetails
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _documentSparkline.default.label
  }, "Published"), lastPublishedTimeAgo && /*#__PURE__*/_react.default.createElement("div", null, lastPublishedTimeAgo))), isLiveDocument && /*#__PURE__*/_react.default.createElement("div", {
    className: _documentSparkline.default.primarySessionBadgeContainer
  }, /*#__PURE__*/_react.default.createElement(SessionBadge, {
    type: "live",
    title: "Live document",
    icon: _icons.LiveIcon
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: _documentSparkline.default.statusDetails
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _documentSparkline.default.label
  }, "Published"), lastUpdated && /*#__PURE__*/_react.default.createElement("div", null, lastUpdatedTimeAgo))), !isLiveDocument && /*#__PURE__*/_react.default.createElement(_default.default, {
    kind: "simple",
    padding: "small",
    onClick: openHistory,
    type: "button",
    disabled: showingRevision || showingChangePanel,
    className: _documentSparkline.default.reviewChangesButton,
    "data-syncing": syncState.isSyncing,
    title: "Review changes",
    "data-transition": filteredSessions.length === 0 ? 'out' : transitionDirection
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _documentSparkline.default.inner
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _documentSparkline.default.sessionBadges,
    style: {
      minWidth: sessionContainerWidth
    },
    "data-syncing": syncState.isSyncing
  }, sessionsSliced.map((session, i) => {
    var spacing = i * _constants.SESSION_BADGE_MARGIN;
    var title = (0, _helpers.formatTimelineEventLabel)(session.type) || session.type;
    var icon = syncState !== null && syncState !== void 0 && syncState.isSyncing ? _syncIcon.default : undefined;
    return /*#__PURE__*/_react.default.createElement(SessionBadge, {
      key: session.index,
      title: title,
      type: "editDraft" // always use editDraft
      ,
      icon: icon,
      style: _objectSpread(_objectSpread({}, SESSION_BADGE_STYLE), {}, {
        transform: "translate3d(".concat(spacing, "px, 0, 0)")
      })
    });
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: _documentSparkline.default.statusDetails
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _documentSparkline.default.label
  }, "Changes"), lastUpdated && /*#__PURE__*/_react.default.createElement("div", null, lastUpdatedTimeAgo)))), /*#__PURE__*/_react.default.createElement("div", {
    className: _documentSparkline.default.documentBadgesContainer,
    style: {
      // TODO: hacky solution. Should probably be fixed.
      transform: filteredSessions.length > 0 ? "translate3d(0, 0, 0)" : "translate3d(-100px, 0, 0)"
    }
  }, /*#__PURE__*/_react.default.createElement(_documentBadges.DocumentBadges, {
    editState: editState,
    badges: badges
  })));
}