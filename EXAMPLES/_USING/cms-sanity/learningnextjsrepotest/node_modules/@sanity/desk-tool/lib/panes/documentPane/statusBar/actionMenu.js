"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ActionMenu = ActionMenu;

var _autoId = require("@reach/auto-id");

var _ui = require("@sanity/ui");

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _popover = require("part:@sanity/components/popover");

var _hotkeys = _interopRequireDefault(require("part:@sanity/components/typography/hotkeys"));

var _chevronDownIcon = _interopRequireDefault(require("part:@sanity/base/chevron-down-icon"));

var _react = _interopRequireWildcard(require("react"));

var _actionStateDialog = require("./actionStateDialog");

var _actionMenu = _interopRequireDefault(require("./actionMenu.css"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function getNext(array, fromIndex) {
  var dir = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  var next = fromIndex + dir; // eslint-disable-next-line no-nested-ternary

  return array[next >= array.length ? 0 : next < 0 ? array.length - 1 : next];
}

function ActionMenu(_ref) {
  var actionStates = _ref.actionStates,
      onOpen = _ref.onOpen,
      onClose = _ref.onClose,
      disabled = _ref.disabled,
      isOpen = _ref.isOpen;
  var listRef = (0, _react.useRef)(null);
  var idPrefix = (0, _autoId.useId)();

  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      popoverElement = _useState2[0],
      setPopoverElement = _useState2[1];

  var _useState3 = (0, _react.useState)(null),
      _useState4 = _slicedToArray(_useState3, 2),
      rootElement = _useState4[0],
      setRootElement = _useState4[1];

  var handleCloseMenu = (0, _react.useCallback)(() => {
    if (!isOpen) {
      return;
    } // this is a bit hacky, but if there is a modal open, we should not close on outside clicks


    var hasOpenDialog = actionStates.some(state => state.dialog);

    if (!hasOpenDialog) {
      onClose();
    }
  }, [actionStates, isOpen, onClose]);
  (0, _ui.useClickOutside)(handleCloseMenu, [rootElement, popoverElement]);

  var _useState5 = (0, _react.useState)(actionStates.find(s => !s.disabled)),
      _useState6 = _slicedToArray(_useState5, 2),
      activeAction = _useState6[0],
      setActiveAction = _useState6[1];

  (0, _react.useEffect)(() => {
    setActiveAction(actionStates.find(s => !s.disabled));
  }, [actionStates, isOpen]);
  (0, _react.useEffect)(() => {
    if (listRef.current) {
      var el = listRef.current.querySelector('[data-has-focus]');

      if (el) {
        el.focus();
      }
    }
  }, [activeAction, actionStates]);
  var handleKeyDown = (0, _react.useCallback)(event => {
    if (event.key === 'Escape') {
      handleCloseMenu();
      return;
    }

    if (event.key !== 'ArrowUp' && event.key !== 'ArrowDown') {
      return;
    }

    var dir = event.key === 'ArrowUp' ? -1 : 1;
    var enabledActions = actionStates.filter(state => state === activeAction || !state.disabled);
    setActiveAction(getNext(enabledActions, enabledActions.indexOf(activeAction), dir));
  }, [activeAction, actionStates, handleCloseMenu]);

  var popoverContent = /*#__PURE__*/_react.default.createElement("div", {
    className: _actionMenu.default.popoverContent,
    ref: setPopoverElement
  }, /*#__PURE__*/_react.default.createElement("ul", {
    "aria-labelledby": "".concat(idPrefix, "-button"),
    className: _actionMenu.default.menu,
    id: "".concat(idPrefix, "-menu"),
    role: "menu",
    ref: listRef
  }, actionStates.map((actionState, idx) => /*#__PURE__*/_react.default.createElement(ActionMenuListItem, {
    actionState: actionState,
    activeAction: activeAction,
    disabled: disabled // eslint-disable-next-line react/no-array-index-key
    ,
    key: idx
  }))));

  return /*#__PURE__*/_react.default.createElement("div", {
    className: _actionMenu.default.actionsDropDown,
    onKeyDown: handleKeyDown,
    ref: setRootElement
  }, /*#__PURE__*/_react.default.createElement(_popover.Popover, {
    content: popoverContent,
    open: isOpen,
    placement: "top-end",
    portal: true
  }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_default.default, {
    "aria-controls": "".concat(idPrefix, "-menu"),
    "aria-haspopup": "true",
    "aria-label": "Actions",
    disabled: disabled,
    icon: _chevronDownIcon.default,
    id: "".concat(idPrefix, "-button"),
    kind: "secondary",
    onClick: isOpen ? onClose : onOpen
  }))));
}

function ActionMenuListItem(_ref2) {
  var actionState = _ref2.actionState,
      activeAction = _ref2.activeAction,
      disabled = _ref2.disabled;

  var _useState7 = (0, _react.useState)(null),
      _useState8 = _slicedToArray(_useState7, 2),
      buttonElement = _useState8[0],
      setButtonElement = _useState8[1];

  return /*#__PURE__*/_react.default.createElement("li", {
    className: _actionMenu.default.menuItem,
    role: "presentation"
  }, /*#__PURE__*/_react.default.createElement("button", _extends({}, actionState === activeAction && {
    'data-has-focus': true
  }, {
    "aria-label": actionState.label,
    className: _actionMenu.default.menuItemButton,
    disabled: disabled || Boolean(actionState.disabled),
    onClick: actionState.onHandle,
    ref: setButtonElement,
    role: "menuitem",
    tabIndex: -1,
    type: "button"
  }), /*#__PURE__*/_react.default.createElement(_ui.Tooltip, {
    disabled: !actionState.title,
    content: /*#__PURE__*/_react.default.createElement(_ui.Box, {
      padding: 2,
      style: {
        maxWidth: 250
      }
    }, actionState.title),
    portal: true,
    placement: "left-start"
  }, /*#__PURE__*/_react.default.createElement("div", {
    tabIndex: -1
  }, actionState.icon && /*#__PURE__*/_react.default.createElement("span", {
    className: _actionMenu.default.menuItemIcon
  }, /*#__PURE__*/(0, _react.createElement)(actionState.icon)), /*#__PURE__*/_react.default.createElement("span", {
    className: _actionMenu.default.menuItemLabel
  }, actionState.label), actionState.shortcut && /*#__PURE__*/_react.default.createElement("span", {
    className: _actionMenu.default.menuItemHotkeys
  }, /*#__PURE__*/_react.default.createElement(_hotkeys.default, {
    keys: String(actionState.shortcut).split('+'),
    size: "small"
  }))))), actionState.dialog && /*#__PURE__*/_react.default.createElement(_actionStateDialog.ActionStateDialog, {
    dialog: actionState.dialog,
    referenceElement: buttonElement
  }));
}