"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactTinyVirtualList = _interopRequireDefault(require("react-tiny-virtual-list"));

var _enhanceWithAvailHeight = _interopRequireDefault(require("./enhanceWithAvailHeight"));

var _InfiniteList = _interopRequireDefault(require("./InfiniteList.css"));

var _class, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _default = (0, _enhanceWithAvailHeight.default)((_temp = _class = class InfiniteList extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      triggerUpdate: 0,
      itemSize: undefined
    });

    _defineProperty(this, "setMeasureElement", element => {
      if (element && element.offsetHeight) {
        this.setState({
          itemSize: element.offsetHeight
        });
      }
    });

    _defineProperty(this, "renderItem", _ref => {
      var index = _ref.index,
          style = _ref.style;
      var _this$props = this.props,
          renderItem = _this$props.renderItem,
          getItemKey = _this$props.getItemKey,
          items = _this$props.items,
          isLoadingMore = _this$props.isLoadingMore;

      if (index === items.length) {
        return /*#__PURE__*/_react.default.createElement("div", {
          key: "more-items",
          style: _objectSpread(_objectSpread({}, style), {}, {
            height: style.height - 1,
            lineHeight: "".concat(style.height - 1, "px")
          }),
          className: _InfiniteList.default.bottomMetaInfo
        }, isLoadingMore ? 'Loadingâ€¦' : 'This list contains more documents');
      }

      var item = items[index];
      return /*#__PURE__*/_react.default.createElement("div", {
        key: getItemKey(item),
        style: style
      }, renderItem(item, index));
    });

    _defineProperty(this, "handleScroll", scrollTop => {
      if (!this.props.onScroll) {
        return;
      }

      this.props.onScroll(scrollTop, this.state.itemSize);
    });
  }

  // @todo replace this with a something proper. This is hacky.
  // eslint-disable-next-line camelcase
  UNSAFE_componentWillReceiveProps(prevProps) {
    if (prevProps.items !== this.props.items) {
      /**
       * This is needed to break equality checks
       * in VirtualList's sCU in cases where itemCount has not changed,
       * but an elements has been removed or added
       */
      this.setState({
        triggerUpdate: Math.random()
      });
    }

    if (prevProps.layout !== this.props.layout) {
      this.setState({
        itemSize: undefined
      });
    }
  }

  render() {
    var _this$props2 = this.props,
        layout = _this$props2.layout,
        height = _this$props2.height,
        items = _this$props2.items,
        className = _this$props2.className,
        renderItem = _this$props2.renderItem,
        hasMoreItems = _this$props2.hasMoreItems,
        isLoadingMore = _this$props2.isLoadingMore;
    var _this$state = this.state,
        triggerUpdate = _this$state.triggerUpdate,
        itemSize = _this$state.itemSize;
    var addExtraItem = hasMoreItems || isLoadingMore;

    if (!items || items.length === 0) {
      return /*#__PURE__*/_react.default.createElement("div", null);
    }

    if (!itemSize && items) {
      return /*#__PURE__*/_react.default.createElement("div", {
        ref: this.setMeasureElement
      }, renderItem(items[0], 0));
    }

    return /*#__PURE__*/_react.default.createElement(_reactTinyVirtualList.default, {
      key: layout // forcefully re-render the whole list when layout changes
      ,
      "data-trigger-update-hack": triggerUpdate // see componentWillReceiveProps above
      ,
      onScroll: this.handleScroll,
      className: className || '',
      height: height,
      itemCount: addExtraItem ? items.length + 1 : items.length,
      itemSize: itemSize,
      renderItem: this.renderItem,
      overscanCount: 50
    });
  }

}, _defineProperty(_class, "propTypes", {
  height: _propTypes.default.number,
  items: _propTypes.default.array,
  // eslint-disable-line react/forbid-prop-types
  hasMoreItems: _propTypes.default.bool,
  isLoadingMore: _propTypes.default.bool,
  renderItem: _propTypes.default.func,
  className: _propTypes.default.string,
  getItemKey: _propTypes.default.func,
  layout: _propTypes.default.oneOf(['default', 'detail', 'card', 'media']),
  onScroll: _propTypes.default.func
}), _defineProperty(_class, "defaultProps", {
  hasMoreItems: false,
  isLoadingMore: false,
  layout: 'default',
  items: [],
  height: 250
}), _temp));

exports.default = _default;