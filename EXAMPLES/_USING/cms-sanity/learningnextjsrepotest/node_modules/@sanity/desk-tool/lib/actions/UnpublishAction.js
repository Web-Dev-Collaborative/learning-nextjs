"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UnpublishAction = UnpublishAction;

var _reactHooks = require("@sanity/react-hooks");

var _unpublishIcon = _interopRequireDefault(require("part:@sanity/base/unpublish-icon"));

var _react = _interopRequireWildcard(require("react"));

var _hooks = require("@sanity/base/hooks");

var _components = require("@sanity/base/components");

var _ConfirmUnpublish = _interopRequireDefault(require("../components/ConfirmUnpublish"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var DISABLED_REASON_TITLE = {
  NOT_PUBLISHED: 'This document is not published'
};

function UnpublishAction(_ref) {
  var id = _ref.id,
      type = _ref.type,
      draft = _ref.draft,
      published = _ref.published,
      onComplete = _ref.onComplete,
      liveEdit = _ref.liveEdit;

  var _useDocumentOperation = (0, _reactHooks.useDocumentOperation)(id, type),
      unpublish = _useDocumentOperation.unpublish;

  var _React$useState = _react.default.useState(null),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      error = _React$useState2[0],
      setError = _React$useState2[1];

  var _React$useState3 = _react.default.useState(false),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      didUnpublish = _React$useState4[0],
      setDidUnpublish = _React$useState4[1];

  var _React$useState5 = _react.default.useState(false),
      _React$useState6 = _slicedToArray(_React$useState5, 2),
      isConfirmDialogOpen = _React$useState6[0],
      setConfirmDialogOpen = _React$useState6[1];

  var handleCancel = (0, _react.useCallback)(() => {
    setConfirmDialogOpen(false);
    onComplete();
  }, [onComplete]);
  var handleConfirm = (0, _react.useCallback)(() => {
    setConfirmDialogOpen(false);
    unpublish.execute();
    onComplete();
  }, [onComplete, unpublish]);
  var unpublishPermission = (0, _hooks.unstable_useCheckDocumentPermission)(id, type, 'unpublish');

  var _useCurrentUser = (0, _hooks.useCurrentUser)(),
      currentUser = _useCurrentUser.value;

  var dialog = (0, _react.useMemo)(() => {
    if (error) {
      return {
        type: 'error',
        onClose: () => setError(null),
        title: 'An error occured',
        content: error.message
      };
    }

    if (didUnpublish) {
      return {
        type: 'success',
        onClose: () => {
          setDidUnpublish(false);
        },
        title: 'Succesfully unpublished the document'
      };
    }

    if (isConfirmDialogOpen) {
      return {
        type: 'legacy',
        onClose: onComplete,
        title: 'Unpublish',
        content: /*#__PURE__*/_react.default.createElement(_ConfirmUnpublish.default, {
          draft: draft,
          published: published,
          onCancel: handleCancel,
          onConfirm: handleConfirm
        })
      };
    }

    return null;
  }, [didUnpublish, draft, error, handleCancel, handleConfirm, isConfirmDialogOpen, onComplete, published]);

  if (!unpublishPermission.granted) {
    return {
      icon: _unpublishIcon.default,
      label: 'Unpublish',
      title: /*#__PURE__*/_react.default.createElement(_components.InsufficientPermissionsMessage, {
        operationLabel: "unpublish this document",
        currentUser: currentUser
      }),
      disabled: true
    };
  }

  if (liveEdit) {
    return null;
  }

  return {
    icon: _unpublishIcon.default,
    disabled: Boolean(unpublish.disabled),
    label: 'Unpublish',
    title: unpublish.disabled ? DISABLED_REASON_TITLE[unpublish.disabled] : '',
    onHandle: () => setConfirmDialogOpen(true),
    dialog
  };
}