"use strict";

var _range2 = _interopRequireDefault(require("lodash/range"));

var _react = _interopRequireWildcard(require("react"));

var _storybook = require("part:@sanity/storybook");

var _fullscreen = _interopRequireDefault(require("part:@sanity/components/dialogs/fullscreen"));

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _knobs = require("part:@sanity/storybook/addons/knobs");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable complexity */
(0, _storybook.storiesOf)('@sanity/desk-tool', module).addDecorator(_knobs.withKnobs).add('Confirm Delete', () => {
  var hasReferringDocuments = (0, _knobs.boolean)('hasReferringDocuments', false);
  var isCheckingReferringDocuments = (0, _knobs.boolean)('isCheckingReferringDocuments', false);
  var canContinue = (0, _knobs.boolean)('canContinue', false);
  var referringDocuments = (0, _range2.default)((0, _knobs.number)('referringDocuments', 1));
  var actions = [canContinue && {
    name: 'confirm',
    title: hasReferringDocuments ? 'Try to delete anyway' : 'Delete now',
    color: 'danger'
  }, {
    name: 'cancel',
    title: 'Keep',
    kind: 'simple'
  }].filter(Boolean);
  var title = isCheckingReferringDocuments ? 'Checking…' : 'Confirm delete';
  return /*#__PURE__*/_react.default.createElement(_fullscreen.default, {
    isOpen: true,
    showHeader: true,
    color: "danger",
    centered: true,
    title: title,
    onAction: () => console.log('onAction'),
    actions: actions
  }, isCheckingReferringDocuments && /*#__PURE__*/_react.default.createElement(_spinner.default, {
    message: "Looking for referring documents\u2026"
  }), hasReferringDocuments && /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("h3", null, "Warning: Found", ' ', referringDocuments.length === 1 ? 'a document' : "".concat(referringDocuments.length, " documents"), ' ', "that refers to ", '"', "Document title", '"'), /*#__PURE__*/_react.default.createElement("p", null, "You may not be allowed to delete", ' "', "Document title", '" ', "as the following document", referringDocuments.length === 1 ? '' : 's', " refers to it:"), "List of documents"), !isCheckingReferringDocuments && !hasReferringDocuments && /*#__PURE__*/_react.default.createElement(_react.Fragment, null, /*#__PURE__*/_react.default.createElement("h3", null, "Are you sure you want to permanently delete the document", /*#__PURE__*/_react.default.createElement("strong", null, "\xA0\u201CTest document\u201D"), "?")));
}).add('Confirm unpublish', () => {
  var hasReferringDocuments = (0, _knobs.boolean)('hasReferringDocuments', false);
  var isCheckingReferringDocuments = (0, _knobs.boolean)('isCheckingReferringDocuments', false);
  var canContinue = (0, _knobs.boolean)('canContinue', false);
  var referringDocuments = (0, _range2.default)((0, _knobs.number)('referringDocuments', 1));
  var actions = [canContinue && {
    name: 'confirm',
    title: hasReferringDocuments ? 'Try to unpublish anyway' : 'Unpublish now'
  }, {
    name: 'cancel',
    title: 'Cancel',
    kind: 'secondary'
  }].filter(Boolean);
  var title = isCheckingReferringDocuments ? 'Checking…' : 'Confirm unpublish';
  return /*#__PURE__*/_react.default.createElement(_fullscreen.default, {
    isOpen: true,
    showHeader: true,
    centered: true,
    title: title,
    onClose: () => console.log('handleClose'),
    onAction: () => console.log('handleAction'),
    actions: actions
  }, isCheckingReferringDocuments && /*#__PURE__*/_react.default.createElement(_spinner.default, {
    message: "Looking for referring documents\u2026"
  }), hasReferringDocuments && /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("h3", null, "Warning: Found", ' ', referringDocuments.length === 1 ? 'a document' : "".concat(referringDocuments.length, " documents"), ' ', "that refers to ", '"', "Document title", '"'), /*#__PURE__*/_react.default.createElement("p", null, "You may not be allowed to unpublish", ' "', "Document title", '" ', "as the following document", referringDocuments.length === 1 ? '' : 's', " refers to it:"), "List of documents"), !isCheckingReferringDocuments && !hasReferringDocuments && /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, "Are you sure you want to unpublish the document ", /*#__PURE__*/_react.default.createElement("strong", null, "Document title"), "?"), /*#__PURE__*/_react.default.createElement("h2", null, "Careful!"), /*#__PURE__*/_react.default.createElement("p", null, "If you unpublish, this document will no longer be available for the public, but it will not be deleted and can be published again later if you change your mind.")));
}).add('Error dialog', () => {
  var isNetworkError = (0, _knobs.boolean)('isNetworkError');
  var message = (0, _knobs.text)('message', 'An error occured');
  return /*#__PURE__*/_react.default.createElement(_fullscreen.default, {
    color: "danger",
    title: "Error",
    isOpen: true,
    centered: true,
    size: "medium"
  }, !isNetworkError && /*#__PURE__*/_react.default.createElement("p", null, message), isNetworkError && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("p", null, "An error occured while attempting to reach the Sanity API."), /*#__PURE__*/_react.default.createElement("pre", null, "Cors check goes here")), /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: () => console.log('retry')
  }, "Retry"));
});