"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ActionStateDialog = ActionStateDialog;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _default = _interopRequireDefault(require("part:@sanity/components/dialogs/default"));

var _popover = _interopRequireDefault(require("part:@sanity/components/dialogs/popover"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ActionStateDialog(props) {
  var dialog = props.dialog,
      referenceElement = props.referenceElement;

  var _useToast = (0, _ui.useToast)(),
      push = _useToast.push;

  var handleDialogAction = (0, _react.useCallback)(action => {
    if (dialog.type === 'confirm') {
      if (action.key === 'cancel') {
        dialog.onCancel();
      }

      if (action.key === 'confirm') {
        dialog.onConfirm();
      }
    }
  }, [dialog]);
  (0, _react.useEffect)(() => {
    if (dialog.type === 'success') {
      push({
        closable: true,
        status: 'success',
        title: dialog.title,
        description: dialog.content,
        onClose: dialog.onClose
      });
    }

    if (dialog.type === 'error') {
      push({
        closable: true,
        status: 'error',
        onClose: dialog.onClose,
        title: dialog.title,
        description: dialog.content
      });
    }
  }, [dialog, push]);

  if (dialog.type === 'legacy') {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, dialog.content);
  }

  if (dialog.type === 'confirm') {
    return /*#__PURE__*/_react.default.createElement(_popover.default, {
      actions: [{
        key: 'confirm',
        color: dialog.color || 'danger',
        title: 'Confirm'
      }, {
        key: 'cancel',
        kind: 'simple',
        title: 'Cancel'
      }],
      hasAnimation: true,
      onAction: handleDialogAction,
      onClickOutside: dialog.onCancel,
      onEscape: dialog.onCancel,
      placement: "auto-end",
      referenceElement: referenceElement,
      size: "small",
      useOverlay: false
    }, /*#__PURE__*/_react.default.createElement("div", null, dialog.message));
  }

  if (dialog.type === 'modal') {
    return /*#__PURE__*/_react.default.createElement(_default.default, {
      onClose: dialog.onClose,
      onClickOutside: dialog.onClose,
      showCloseButton: dialog.showCloseButton,
      size: "medium",
      padding: "large"
    }, dialog.content);
  }

  if (dialog.type === 'popover') {
    return /*#__PURE__*/_react.default.createElement(_popover.default, {
      onClickOutside: dialog.onClose,
      onEscape: dialog.onClose,
      placement: "auto-end",
      useOverlay: false,
      hasAnimation: true,
      referenceElement: referenceElement
    }, dialog.content);
  }

  if (dialog.type === 'success') {
    return null;
  }

  if (dialog.type === 'error') {
    return null;
  }

  var unknownDialog = dialog; // eslint-disable-next-line no-console

  console.warn("Unsupported dialog type ".concat(unknownDialog.type));
  return /*#__PURE__*/_react.default.createElement(_default.default, {
    onClose: unknownDialog.onClose,
    onClickOutside: unknownDialog.onClose,
    size: "medium",
    padding: "large"
  }, unknownDialog.content || /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Unexpected dialog type (", /*#__PURE__*/_react.default.createElement("code", null, unknownDialog.type), ")"));
}